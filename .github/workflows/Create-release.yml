name: Create Release and Upload Asset for WoWThreads

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  package:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tag creation

      - name: Retrieve version from WoWThreads.toc
        id: get_version
        run: |
          if [ ! -f WoWThreads.toc ]; then
            echo "WoWThreads.toc file not found!"
            exit 1
          fi
          VERSION=$(grep -E "^## Version:" WoWThreads.toc | sed -E 's/## Version: *([0-9.]+).*/\1/')
          if [ -z "$VERSION" ]; then
            echo "Version not found in WoWThreads.toc!"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Clean up previous builds
        run: rm -rf WoWThreads.zip package

      - name: Package files
        run: |
          mkdir -p package/WoWThreads
          cp WoWThreads.toc package/WoWThreads/
          cp LICENSE package/WoWThreads/
          cp README.md package/WoWThreads/
          [ -d LibACE ] && cp -r LibACE package/WoWThreads/
          [ -d Locales ] && cp -r Locales package/WoWThreads/
          [ -d Sources ] && cp -r Sources package/WoWThreads/
          [ -d Utils ] && cp -r Utils package/WoWThreads/
          find package/WoWThreads -name ".git" -exec rm -rf {} +
          find package/WoWThreads -name ".github" -exec rm -rf {} +
          find package/WoWThreads -name "Notes" -exec rm -rf {} +
          find package/WoWThreads -name "Testing" -exec rm -rf {} +
          find package/WoWThreads -name "WoWThreads.code-workspace" -exec rm -rf {} +
          cd package
          zip -r ../WoWThreads.zip WoWThreads

      - name: Check if token exists
        run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "GITHUB_TOKEN is not set or empty."
            exit 1
          else
            echo "GITHUB_TOKEN is set."
          fi

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status || { echo "Authentication failed. Check GITHUB_TOKEN permissions."; exit 1; }

      - name: Ensure tag exists
        run: |
          TAG_NAME="v${{ env.VERSION }}"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, updating to current commit."
            git tag -f $TAG_NAME  # Force-update tag to current commit
            git push origin $TAG_NAME --force || { echo "Failed to push tag $TAG_NAME."; exit 1; }
          else
            git tag $TAG_NAME
            git push origin $TAG_NAME || { echo "Failed to push tag $TAG_NAME."; exit 1; }
          fi

      - name: Create or Update Release
        run: |
          tag_name="v${{ env.VERSION }}"
          release_name="WoWThreads Release $tag_name"
          release_body="WoWThreads release for version ${{ env.VERSION }}"
          # Check if release exists for the tag
          if gh release view $tag_name >/dev/null 2>&1; then
            echo "Release for $tag_name exists, deleting and recreating."
            gh release delete $tag_name --yes || { echo "Failed to delete existing release."; exit 1; }
          fi
          # Create new release
          gh release create $tag_name WoWThreads.zip --title "$release_name" --notes "$release_body" --target main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}