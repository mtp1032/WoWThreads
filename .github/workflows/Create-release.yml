name: Create Release and Upload Asset for WoWThreads

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  package:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Retrieve version from WoWThreads.toc
        id: get_version
        run: |
          if [ ! -f WoWThreads.toc ]; then
            echo "WoWThreads.toc file not found!"
            exit 1
          fi
          VERSION=$(grep -E "^## Version:" WoWThreads.toc | sed -E 's/## Version: *([0-9.]+).*/\1/')
          if [ -z "$VERSION" ]; then
            echo "Version not found in WoWThreads.toc!"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Clean up previous builds
        run: rm -rf WoWThreads.zip package

      - name: Package files
        run: |
          mkdir -p package/WoWThreads
          cp WoWThreads.toc package/WoWThreads/
          cp LICENSE package/WoWThreads/
          cp README.md package/WoWThreads/
          [ -d LibACE ] && cp -r LibACE package/WoWThreads/
          [ -d Locales ] && cp -r Locales package/WoWThreads/
          [ -d Sources ] && cp -r Sources package/WoWThreads/
          [ -d Utils ] && cp -r Utils package/WoWThreads/
          find package/WoWThreads -name ".git" -exec rm -rf {} +
          find package/WoWThreads -name ".github" -exec rm -rf {} +
          find package/WoWThreads -name "Notes" -exec rm -rf {} +
          find package/WoWThreads -name "Testing" -exec rm -rf {} +
          find package/WoWThreads -name "WoWThreads.code-workspace" -exec rm -rf {} +
          cd package
          zip -r ../WoWThreads.zip WoWThreads

      - name: Check if token exists
        run: |
          if [ -z "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
            echo "PERSONAL_ACCESS_TOKEN is not set or empty."
            exit 1
          else
            echo "PERSONAL_ACCESS_TOKEN is set."
          fi

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.PERSONAL_ACCESS_TOKEN }}" | gh auth login --with-token
          gh auth status || { echo "Authentication failed. Check PERSONAL_ACCESS_TOKEN."; exit 1; }

      - name: Create Release
        run: |
          tag_name="v${{ env.VERSION }}"
          release_name="WoWThreads Release $tag_name"
          release_body="WoWThreads release for version ${{ env.VERSION }}"
          gh release create $tag_name WoWThreads.zip --title "$release_name" --notes "$release_body"