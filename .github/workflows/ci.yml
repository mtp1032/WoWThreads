name: Build and Publish WoWThreads

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Package WoWThreads
      run: |
        mkdir -p package/WoWThreads
        cp -r Docs package/WoWThreads/
        cp -r Libs package/WoWThreads/
        cp -r Locales package/WoWThreads/
        cp -r Sources package/WoWThreads/
        cp LICENSE package/WoWThreads/
        cp README.md package/WoWThreads/
        cp WoWThreads.code-workspace package/WoWThreads/
        cp WoWThreads_Cata.toc package/WoWThreads/
        cp WoWThreads_Mainline.toc package/WoWThreads/
        cp WoWThreads_Vanilla.toc package/WoWThreads/
        cd package
        zip -r ../WoWThreads.zip WoWThreads

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: WoWThreads
        path: WoWThreads.zip

  publish:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: WoWThreads

    - name: Ensure WoWThreads.zip exists
      run: |
        if [ ! -f "WoWThreads.zip" ]; then
          echo "File WoWThreads.zip does not exist"
          exit 1
        fi

    - name: Ensure metadata.json exists
      run: |
        if [ ! -f "metadata.json" ]; then
          echo "File metadata.json does not exist"
          exit 1
        fi

    - name: Debug Current Directory
      run: |
        echo "Current working directory:"
        pwd
        echo "Listing files:"
        ls -la

    - name: Publish to CurseForge
      env:
        CURSEFORGE_API_KEY: ${{ secrets.CURSEFORGE_API_KEY }}
        CURSEFORGE_EMAIL: ${{ secrets.CURSEFORGE_EMAIL }}
      run: |
        response=$(curl -s -w "%{http_code}" -X POST "https://wow.curseforge.com/api/projects/1062198/upload-file" \
        -H "x-api-token: $CURSEFORGE_API_KEY" \
        -F "file=@$(pwd)/WoWThreads.zip" \
        -F "metadata=@$(pwd)/metadata.json" -o response.json)
        http_code=$(tail -n1 <<< "$response")
        content=$(sed '$d' <<< "$response")

        echo "HTTP Status Code: $http_code"
        echo "Response Content: $content"

        if [ "$http_code" -ne 200 ]; then
          echo "Upload failed with status code $http_code"
          exit 1
        else
          echo "Upload succeeded"
        fi
